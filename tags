!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/x41/Documents/two-pass-assembler-c/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
BITMAP_32	encoder.h	/^typedef int BITMAP_32[2];$/;"	t	typeref:typename:int[2]
CMD_MAX_SIZE	globals.h	/^#define CMD_MAX_SIZE /;"	d
COMMENT_CHAR	globals.h	/^#define COMMENT_CHAR /;"	d
ClearBit	encoder.h	/^#define ClearBit(/;"	d
ENCODER_H	encoder.h	/^#define ENCODER_H$/;"	d
ERRORS_H	errors.h	/^#define ERRORS_H$/;"	d
FALSE	globals.h	/^#define FALSE /;"	d
FIRST_PASS_H	first_pass.h	/^#define FIRST_PASS_H$/;"	d
Flags	first_pass.c	/^typedef struct Flags{$/;"	s	file:
Flags	first_pass.c	/^} Flags;$/;"	t	typeref:struct:Flags	file:
GLOBALS_H	globals.h	/^#define GLOBALS_H$/;"	d
I	instructions.h	/^	I,$/;"	e	enum:__anon255a72100103
INSTRUCTIONS_H	instructions.h	/^#define INSTRUCTIONS_H$/;"	d
I_cmds	instructions.c	/^char I_cmds[15][5] = {$/;"	v	typeref:typename:char[15][5]
I_cmds_len	instructions.c	/^int I_cmds_len = 15;$/;"	v	typeref:typename:int
InstructionsGroup	instructions.h	/^} InstructionsGroup;$/;"	t	typeref:enum:__anon255a72100103
J	instructions.h	/^	J,$/;"	e	enum:__anon255a72100103
J_cmds	instructions.c	/^char J_cmds[4][5] = {$/;"	v	typeref:typename:char[4][5]
J_cmds_len	instructions.c	/^int J_cmds_len = 4;$/;"	v	typeref:typename:int
LABELS_H	labels.h	/^#define LABELS_H$/;"	d
LABEL_CHAR	labels.h	/^#define LABEL_CHAR /;"	d
LINE_MAX_SIZE	globals.h	/^#define LINE_MAX_SIZE /;"	d
Label	labels.h	/^typedef struct Label{$/;"	s
Label	labels.h	/^} Label;$/;"	t	typeref:struct:Label
LabelsTable	labels.h	/^typedef struct LabelsTable{$/;"	s
LabelsTable	labels.h	/^} LabelsTable;$/;"	t	typeref:struct:LabelsTable
MAX_CMD_LENGTH	instructions.c	/^#define MAX_CMD_LENGTH /;"	d	file:
R	instructions.h	/^	R$/;"	e	enum:__anon255a72100103
R_cmds	instructions.c	/^char R_cmds[8][5] = {$/;"	v	typeref:typename:char[8][5]
R_cmds_len	instructions.c	/^int R_cmds_len = 8;$/;"	v	typeref:typename:int
SECOND_PASS_H	second_pass.h	/^#define SECOND_PASS_H$/;"	d
STREQ	globals.h	/^#define STREQ(/;"	d
SetBit	encoder.h	/^#define SetBit(/;"	d
TMP_DATA_MMAP_FILE	encoder.c	/^#define TMP_DATA_MMAP_FILE /;"	d	file:
TMP_EXTERNALS_MMAP_FILE	encoder.c	/^#define TMP_EXTERNALS_MMAP_FILE /;"	d	file:
TRUE	globals.h	/^#define TRUE /;"	d
TestBit	encoder.h	/^#define TestBit(/;"	d
UTILS_H	utils.h	/^#define UTILS_H$/;"	d
WHITESPACE	globals.h	/^#define WHITESPACE /;"	d
__anon255a72100103	instructions.h	/^typedef enum {$/;"	g
add_data_offset	labels.c	/^void add_data_offset(LabelsTable *tbl_ptr, int offset){$/;"	f	typeref:typename:void
add_external_variable	labels.c	/^void add_external_variable(LabelsTable *tbl_ptr, char *label_name){$/;"	f	typeref:typename:void
add_label_to_table	labels.c	/^void add_label_to_table(LabelsTable *tbl_ptr, Label *label){$/;"	f	typeref:typename:void
add_obj_to_bitmap	encoder.c	/^void add_obj_to_bitmap(int obj, int *start_ix, int size, BITMAP_32 *bitmap){$/;"	f	typeref:typename:void
build_I_instruction	encoder.c	/^BITMAP_32 *build_I_instruction(int opcode, int rs, int rt, int immed) {$/;"	f	typeref:typename:BITMAP_32 *
build_J_instruction	encoder.c	/^BITMAP_32 *build_J_instruction(int opcode, int is_reg, int addr) {$/;"	f	typeref:typename:BITMAP_32 *
build_R_instruction	encoder.c	/^BITMAP_32 *build_R_instruction(int opcode, int rs, int rt, int rd, int funct_no) {$/;"	f	typeref:typename:BITMAP_32 *
check_file	errors.c	/^void check_file(char *fname, size_t line_len){$/;"	f	typeref:typename:void
check_number_of_args	errors.c	/^bool check_number_of_args(char* line_ptr, int line_no){$/;"	f	typeref:typename:bool
check_registers	errors.c	/^bool check_registers(char *line_ptr, int line_no){$/;"	f	typeref:typename:bool
clean_str	utils.c	/^char *clean_str(char *s){$/;"	f	typeref:typename:char *
command_exists	errors.c	/^bool command_exists(char *cmd_name){$/;"	f	typeref:typename:bool
contain_label	labels.c	/^bool contain_label(char *s){$/;"	f	typeref:typename:bool
create_label	labels.c	/^Label *create_label(LabelsTable *tbl_ptr, int addr, char *name, int is_code, int is_entry, int i/;"	f	typeref:typename:Label *
create_tmp_files	encoder.c	/^void create_tmp_files(){$/;"	f	typeref:typename:void
delete_tmp_files	encoder.c	/^void delete_tmp_files(){$/;"	f	typeref:typename:void
dump_bitmap	encoder.c	/^void dump_bitmap(BITMAP_32 *bitmap, char *fname, int line_no, int bytes_to_dump) {$/;"	f	typeref:typename:void
dump_entry_labels	encoder.c	/^void dump_entry_labels(LabelsTable *labels_tbl_ptr, char *of){$/;"	f	typeref:typename:void
encode_instruction_line	encoder.c	/^BITMAP_32 *encode_instruction_line(char *line_ptr, LabelsTable *labels_table_ptr, int frame_no){$/;"	f	typeref:typename:BITMAP_32 *
errors.o	Makefile	/^errors.o: errors.c errors.h $/;"	t
external	globals.h	/^	external = 1$/;"	e	enum:label_tags
first_pass	first_pass.c	/^void first_pass(char *fname){$/;"	f	typeref:typename:void
get_basename	utils.c	/^char *get_basename(char *fname){$/;"	f	typeref:typename:char *
get_cmd_name	instructions.c	/^void get_cmd_name(char *line_ptr, char *buf){$/;"	f	typeref:typename:void
get_entry_label	labels.c	/^char *get_entry_label(char *line_ptr){$/;"	f	typeref:typename:char *
get_function_id	instructions.c	/^int get_function_id(char *cmd_name){$/;"	f	typeref:typename:int
get_instruction	instructions.c	/^char *get_instruction(char *line_ptr){$/;"	f	typeref:typename:char *
get_instruction_group	instructions.c	/^InstructionsGroup get_instruction_group(char *cmd_name){$/;"	f	typeref:typename:InstructionsGroup
get_label	labels.c	/^char *get_label(char *line) {$/;"	f	typeref:typename:char *
get_label_addr	labels.c	/^int get_label_addr(LabelsTable *tbl_ptr, char *name){$/;"	f	typeref:typename:int
get_label_addr_dist	encoder.c	/^int get_label_addr_dist(char *lbl_name, LabelsTable *labels_tbl_ptr, int frame_addr){$/;"	f	typeref:typename:int
get_label_by_name	labels.c	/^Label *get_label_by_name(LabelsTable *tbl_ptr, char *name){$/;"	f	typeref:typename:Label *
get_line_wout_spaces	utils.c	/^int get_line_wout_spaces(char **buffer, size_t *size, FILE *file){$/;"	f	typeref:typename:int
get_opcode	instructions.c	/^int get_opcode(char *cmd_name){$/;"	f	typeref:typename:int
get_required_cells	instructions.c	/^int get_required_cells(char *line_ptr) {$/;"	f	typeref:typename:int
has_label	first_pass.c	/^    unsigned int has_label : 1;$/;"	m	struct:Flags	typeref:typename:unsigned int:1	file:
instruction.o	Makefile	/^instruction.o: instruction.c instruction.h $/;"	t
instructions	instructions.c	/^char *instructions[] = {$/;"	v	typeref:typename:char * []
instructions_cnt	instructions.c	/^int instructions_cnt = 4;$/;"	v	typeref:typename:int
is_code	labels.h	/^	unsigned int is_code: 1;$/;"	m	struct:Label	typeref:typename:unsigned int:1
is_code_instruction	instructions.c	/^bool is_code_instruction(char *line_ptr){$/;"	f	typeref:typename:bool
is_entry	labels.h	/^	unsigned int is_entry: 1;$/;"	m	struct:Label	typeref:typename:unsigned int:1
is_entry_instruction	instructions.c	/^bool is_entry_instruction(char *line_ptr) {$/;"	f	typeref:typename:bool
is_external	labels.h	/^	unsigned int is_external: 1;$/;"	m	struct:Label	typeref:typename:unsigned int:1
is_external_instruction	instructions.c	/^bool is_external_instruction(char *line_ptr) {$/;"	f	typeref:typename:bool
is_instruction	first_pass.c	/^    unsigned int is_instruction : 1;$/;"	m	struct:Flags	typeref:typename:unsigned int:1	file:
is_instruction	instructions.c	/^bool is_instruction(char *s){$/;"	f	typeref:typename:bool
is_reserved_word	errors.c	/^bool is_reserved_word(char* word)$/;"	f	typeref:typename:bool
label	labels.h	/^	Label *label;$/;"	m	struct:LabelsTable	typeref:typename:Label *
label	labels.h	/^	char label[80];$/;"	m	struct:Label	typeref:typename:char[80]
label_code_instruction	labels.c	/^void label_code_instruction(LabelsTable *tbl_ptr, int addr, char *label_name){$/;"	f	typeref:typename:void
label_data_instruction	labels.c	/^void label_data_instruction(LabelsTable *tbl_ptr, int addr, char *label_name){$/;"	f	typeref:typename:void
label_tags	globals.h	/^typedef enum label_tags{$/;"	g
label_tags	globals.h	/^} label_tags;$/;"	t	typeref:enum:label_tags
labels.o	Makefile	/^labels.o: labels.c labels.h $/;"	t
linked_list.o	Makefile	/^linked_list.o: linked_list.c linked_list.h $/;"	t
main	Makefile	/^main: main.o first_pass.o second_pass.o instruction.o labels.o errors.o utils.o linked_list.o$/;"	t
main	main.c	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
mark_label_as_entry	labels.c	/^void mark_label_as_entry(LabelsTable *tbl, char *name){$/;"	f	typeref:typename:void
merge_tmp_data_file	encoder.c	/^void merge_tmp_data_file(char *dst_fname, int dc_offset){$/;"	f	typeref:typename:void
next	labels.h	/^	struct LabelsTable *next;$/;"	m	struct:LabelsTable	typeref:struct:LabelsTable *
open_quotes	errors.c	/^bool open_quotes(char* line_ptr)$/;"	f	typeref:typename:bool
parse_external_var_name	instructions.c	/^char *parse_external_var_name(char *line_ptr) {$/;"	f	typeref:typename:char *
print_bitmap_32	encoder.c	/^void print_bitmap_32(BITMAP_32 *bitmap){$/;"	f	typeref:typename:void
raise_error	errors.c	/^void raise_error(char* msg)$/;"	f	typeref:typename:void
relevant_line	instructions.c	/^bool relevant_line(char *s){$/;"	f	typeref:typename:bool
rename_externals_file	encoder.c	/^void rename_externals_file(char *new_filename){$/;"	f	typeref:typename:void
reset_bitmap	encoder.c	/^void reset_bitmap(BITMAP_32 *bitmap){$/;"	f	typeref:typename:void
reverse_dump_bitmap	encoder.c	/^void reverse_dump_bitmap(BITMAP_32 *bitmap, char *fname, int line_no, int bytes_to_dump) {$/;"	f	typeref:typename:void
second_pass	second_pass.c	/^void second_pass(char *fname, LabelsTable *labels_table_ptr, int ic_size, int dc_size){$/;"	f	typeref:typename:void
second_pass.o	Makefile	/^second_pass.o: first_pass.c first_pass.h $/;"	t
second_pass.o	Makefile	/^second_pass.o: second_pass.c second_pass.h $/;"	t
starts_with	utils.c	/^bool starts_with(char *s, char *t){$/;"	f	typeref:typename:bool
tmp_dump_data_instruction	encoder.c	/^void tmp_dump_data_instruction(char *line_ptr){$/;"	f	typeref:typename:void
tmp_dump_external_label	encoder.c	/^void tmp_dump_external_label(char *lbl_name, LabelsTable *labels_table_ptr, int frame_no){$/;"	f	typeref:typename:void
trim_label	labels.c	/^char *trim_label(char *line){$/;"	f	typeref:typename:char *
trim_whitespaces	utils.c	/^char *trim_whitespaces(char *s){$/;"	f	typeref:typename:char *
utils.o	Makefile	/^utils.o: utils.c utils.h $/;"	t
validate_commas	errors.c	/^bool validate_commas(char* line_ptr)$/;"	f	typeref:typename:bool
validate_label	errors.c	/^bool validate_label(char *lbl_name, int line_no){$/;"	f	typeref:typename:bool
validate_prefix	errors.c	/^bool validate_prefix(char* line_ptr)$/;"	f	typeref:typename:bool
validate_register	errors.c	/^bool validate_register(int reg_num)$/;"	f	typeref:typename:bool
value	labels.h	/^	int value;$/;"	m	struct:Label	typeref:typename:int
